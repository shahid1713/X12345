import type { Node, Visitor } from '@babel/traverse';
export declare function applyTransformAsync<TOptions>(ast: Node, transform: AsyncTransform<TOptions>, options?: TOptions): Promise<TransformState>;
export declare function applyTransform<TOptions>(ast: Node, transform: Transform<TOptions>, options?: TOptions): TransformState;
export declare function applyTransforms(ast: Node, transforms: Transform[], options?: {
    noScope?: boolean;
    name?: string;
    log?: boolean;
}): TransformState;
export declare function mergeTransforms(options: {
    name: string;
    tags: Tag[];
    transforms: Transform[];
}): Transform;
export interface TransformState {
    changes: number;
}
export interface Transform<TOptions = unknown> {
    name: string;
    tags: Tag[];
    scope?: boolean;
    run?: (ast: Node, state: TransformState, options?: TOptions) => void;
    visitor?: (options?: TOptions) => Visitor<TransformState>;
}
export interface AsyncTransform<TOptions = unknown> extends Transform<TOptions> {
    run?: (ast: Node, state: TransformState, options?: TOptions) => Promise<void>;
}
export type Tag = 'safe' | 'unsafe';
//# sourceMappingURL=transform.d.ts.map