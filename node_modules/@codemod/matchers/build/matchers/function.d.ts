import * as t from '@babel/types';
import { Matcher } from './Matcher';
export declare class FunctionMatcher extends Matcher<t.Function> {
    private readonly params?;
    private readonly body?;
    constructor(params?: Matcher<t.LVal[]> | Matcher<t.LVal>[] | undefined, body?: Matcher<t.BlockStatement | t.Expression> | undefined);
    matchValue(value: unknown, keys: ReadonlyArray<PropertyKey>): value is t.Function;
}
export declare function Function(params?: Matcher<Array<t.LVal>> | Array<Matcher<t.LVal>>, body?: Matcher<t.Expression | t.BlockStatement>): Matcher<t.Function>;
export { Function as function };
