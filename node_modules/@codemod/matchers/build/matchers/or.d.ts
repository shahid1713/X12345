import { Matcher } from './Matcher';
export declare class OrMatcher<T, A extends Array<Matcher<T> | T>> extends Matcher<T> {
    private readonly matchersOrValues;
    constructor(...matchersOrValues: A);
    matchValue(value: unknown, keys: ReadonlyArray<PropertyKey>): value is T;
}
export declare function or(): Matcher<never>;
export declare function or<T>(first: Matcher<T> | T): Matcher<T>;
export declare function or<T, U>(first: Matcher<T> | T, second: Matcher<U> | U): Matcher<T | U>;
export declare function or<T, U, V>(first: Matcher<T> | T, second: Matcher<U> | U, third: Matcher<V> | V): Matcher<T | U | V>;
export declare function or<T, U, V, W>(first: Matcher<T> | T, second: Matcher<U> | U, third: Matcher<V> | V, fourth: Matcher<W> | W): Matcher<T | U | V | W>;
export declare function or<T, U, V, W, X>(first: Matcher<T> | T, second: Matcher<U> | U, third: Matcher<V> | V, fourth: Matcher<W> | W, fifth: Matcher<X> | X): Matcher<T | U | V | W | X>;
